plugins {
	id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
	platformSetupLoomIde()
	forge()
}

loom {
	accessWidenerPath = project(":common").loom.accessWidenerPath

	forge {
		convertAccessWideners = true
		extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

		mixinConfig "hammer.border.mixins.json"
		mixinConfig "hammer.chat.mixins.json"
		mixinConfig "hammer.core.mixins.json"
		mixinConfig "hammer.gravity.mixins.json"
		mixinConfig "hammer.gui.mixins.json"
		mixinConfig "hammer.permission.mixins.json"
		mixinConfig "hammer.preset.mixins.json"
		mixinConfig "hammer.util.mixins.json"
		mixinConfig "hammer.zone.mixins.json"
	}
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentForge.extendsFrom common
}

dependencies {
	forge "net.minecraftforge:forge:${forgeVersion}"
	// Remove the next line if you don't want to depend on the API
	modApi "dev.architectury:architectury-forge:${architecturyVersion}"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

	modApi "net.luckperms:api:${luckPermsVersion}"
	include "net.luckperms:api:${luckPermsVersion}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("META-INF/mods.toml") {
		expand "version": project.version
	}
}

shadowJar {
	exclude "fabric.mod.json"
	exclude "architectury.common.json"

	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	input.set shadowJar.archiveFile
	dependsOn shadowJar
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}

publishing {
	publications {
		mavenForge(MavenPublication) {
			artifactId = rootProject.projectId + "-" + project.name
			groupId = projectGroup
			version = projectVersion

			from components.java
		}
	}

	repositories {
		maven {
			name = "vini2003"
			url = "https://maven.vini2003.dev/releases"

			credentials {
				username = System.getenv("MVN_USERNAME")
				password = System.getenv("MVN_TOKEN")
			}

			authentication {
				basic(BasicAuthentication)
			}
		}
	}
}